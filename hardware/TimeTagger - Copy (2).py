# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
The TimeTagger module to measure timing event very accurate.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TimeTagger', [dirname(__file__)])
        except ImportError:
            import _TimeTagger
            return _TimeTagger
        if fp is not None:
            try:
                _mod = imp.load_module('_TimeTagger', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TimeTagger = swig_import_helper()
    del swig_import_helper
else:
    import _TimeTagger
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TimeTagger.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _TimeTagger.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _TimeTagger.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, x) -> ptrdiff_t"""
        return _TimeTagger.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _TimeTagger.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _TimeTagger.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector:
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.IntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.IntVector___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector___len__(self)

    def pop(self):
        """pop(self) -> std::vector< int >::value_type"""
        return _TimeTagger.IntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, i, j) -> IntVector"""
        return _TimeTagger.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< int,std::allocator< int > >())
        __setslice__(self, i, j)
        """
        return _TimeTagger.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, i, j)"""
        return _TimeTagger.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IntVector
        __getitem__(self, i) -> std::vector< int >::value_type const &
        """
        return _TimeTagger.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.IntVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, x)"""
        return _TimeTagger.IntVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.IntVector_empty(self)

    def size(self):
        """size(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector_size(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.IntVector_clear(self)

    def swap(self, *args):
        """swap(self, v)"""
        return _TimeTagger.IntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector< int >::allocator_type"""
        return _TimeTagger.IntVector_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector< int >::iterator"""
        return _TimeTagger.IntVector_begin(self)

    def end(self):
        """end(self) -> std::vector< int >::iterator"""
        return _TimeTagger.IntVector_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector< int >::reverse_iterator"""
        return _TimeTagger.IntVector_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector< int >::reverse_iterator"""
        return _TimeTagger.IntVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< int >::iterator
        erase(self, first, last) -> std::vector< int >::iterator
        """
        return _TimeTagger.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, arg2) -> IntVector
        __init__(self, size) -> IntVector
        __init__(self, size, value) -> IntVector
        """
        this = _TimeTagger.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, x)"""
        return _TimeTagger.IntVector_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector< int >::value_type const &"""
        return _TimeTagger.IntVector_front(self)

    def back(self):
        """back(self) -> std::vector< int >::value_type const &"""
        return _TimeTagger.IntVector_back(self)

    def assign(self, *args):
        """assign(self, n, x)"""
        return _TimeTagger.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< int >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.IntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, n)"""
        return _TimeTagger.IntVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _TimeTagger.IntVector_swigregister
IntVector_swigregister(IntVector)

class UIntVector:
    """Proxy of C++ std::vector<(unsigned int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.UIntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.UIntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.UIntVector___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector___len__(self)

    def pop(self):
        """pop(self) -> std::vector< unsigned int >::value_type"""
        return _TimeTagger.UIntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, i, j) -> UIntVector"""
        return _TimeTagger.UIntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(self, i, j)
        """
        return _TimeTagger.UIntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, i, j)"""
        return _TimeTagger.UIntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.UIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UIntVector
        __getitem__(self, i) -> std::vector< unsigned int >::value_type const &
        """
        return _TimeTagger.UIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.UIntVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, x)"""
        return _TimeTagger.UIntVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.UIntVector_empty(self)

    def size(self):
        """size(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector_size(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.UIntVector_clear(self)

    def swap(self, *args):
        """swap(self, v)"""
        return _TimeTagger.UIntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector< unsigned int >::allocator_type"""
        return _TimeTagger.UIntVector_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector< unsigned int >::iterator"""
        return _TimeTagger.UIntVector_begin(self)

    def end(self):
        """end(self) -> std::vector< unsigned int >::iterator"""
        return _TimeTagger.UIntVector_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector< unsigned int >::reverse_iterator"""
        return _TimeTagger.UIntVector_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector< unsigned int >::reverse_iterator"""
        return _TimeTagger.UIntVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.UIntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned int >::iterator
        erase(self, first, last) -> std::vector< unsigned int >::iterator
        """
        return _TimeTagger.UIntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> UIntVector
        __init__(self, arg2) -> UIntVector
        __init__(self, size) -> UIntVector
        __init__(self, size, value) -> UIntVector
        """
        this = _TimeTagger.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, x)"""
        return _TimeTagger.UIntVector_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector< unsigned int >::value_type const &"""
        return _TimeTagger.UIntVector_front(self)

    def back(self):
        """back(self) -> std::vector< unsigned int >::value_type const &"""
        return _TimeTagger.UIntVector_back(self)

    def assign(self, *args):
        """assign(self, n, x)"""
        return _TimeTagger.UIntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.UIntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned int >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.UIntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, n)"""
        return _TimeTagger.UIntVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _TimeTagger.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class LongVector:
    """Proxy of C++ std::vector<(long long)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.LongVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.LongVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.LongVector___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector___len__(self)

    def pop(self):
        """pop(self) -> std::vector< long long >::value_type"""
        return _TimeTagger.LongVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, i, j) -> LongVector"""
        return _TimeTagger.LongVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< long long,std::allocator< long long > >())
        __setslice__(self, i, j)
        """
        return _TimeTagger.LongVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, i, j)"""
        return _TimeTagger.LongVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> LongVector
        __getitem__(self, i) -> std::vector< long long >::value_type const &
        """
        return _TimeTagger.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.LongVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, x)"""
        return _TimeTagger.LongVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.LongVector_empty(self)

    def size(self):
        """size(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector_size(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.LongVector_clear(self)

    def swap(self, *args):
        """swap(self, v)"""
        return _TimeTagger.LongVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector< long long >::allocator_type"""
        return _TimeTagger.LongVector_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector< long long >::iterator"""
        return _TimeTagger.LongVector_begin(self)

    def end(self):
        """end(self) -> std::vector< long long >::iterator"""
        return _TimeTagger.LongVector_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector< long long >::reverse_iterator"""
        return _TimeTagger.LongVector_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector< long long >::reverse_iterator"""
        return _TimeTagger.LongVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.LongVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< long long >::iterator
        erase(self, first, last) -> std::vector< long long >::iterator
        """
        return _TimeTagger.LongVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> LongVector
        __init__(self, arg2) -> LongVector
        __init__(self, size) -> LongVector
        __init__(self, size, value) -> LongVector
        """
        this = _TimeTagger.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, x)"""
        return _TimeTagger.LongVector_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector< long long >::value_type const &"""
        return _TimeTagger.LongVector_front(self)

    def back(self):
        """back(self) -> std::vector< long long >::value_type const &"""
        return _TimeTagger.LongVector_back(self)

    def assign(self, *args):
        """assign(self, n, x)"""
        return _TimeTagger.LongVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.LongVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< long long >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.LongVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, n)"""
        return _TimeTagger.LongVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _TimeTagger.LongVector_swigregister
LongVector_swigregister(LongVector)

class ULongVector:
    """Proxy of C++ std::vector<(unsigned long long)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.ULongVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.ULongVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.ULongVector___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector___len__(self)

    def pop(self):
        """pop(self) -> std::vector< unsigned long long >::value_type"""
        return _TimeTagger.ULongVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, i, j) -> ULongVector"""
        return _TimeTagger.ULongVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, i, j, v=std::vector< unsigned long long,std::allocator< unsigned long long > >())
        __setslice__(self, i, j)
        """
        return _TimeTagger.ULongVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, i, j)"""
        return _TimeTagger.ULongVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.ULongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> ULongVector
        __getitem__(self, i) -> std::vector< unsigned long long >::value_type const &
        """
        return _TimeTagger.ULongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.ULongVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, x)"""
        return _TimeTagger.ULongVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.ULongVector_empty(self)

    def size(self):
        """size(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector_size(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.ULongVector_clear(self)

    def swap(self, *args):
        """swap(self, v)"""
        return _TimeTagger.ULongVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector< unsigned long long >::allocator_type"""
        return _TimeTagger.ULongVector_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector< unsigned long long >::iterator"""
        return _TimeTagger.ULongVector_begin(self)

    def end(self):
        """end(self) -> std::vector< unsigned long long >::iterator"""
        return _TimeTagger.ULongVector_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _TimeTagger.ULongVector_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _TimeTagger.ULongVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.ULongVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned long long >::iterator
        erase(self, first, last) -> std::vector< unsigned long long >::iterator
        """
        return _TimeTagger.ULongVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ULongVector
        __init__(self, arg2) -> ULongVector
        __init__(self, size) -> ULongVector
        __init__(self, size, value) -> ULongVector
        """
        this = _TimeTagger.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, x)"""
        return _TimeTagger.ULongVector_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector< unsigned long long >::value_type const &"""
        return _TimeTagger.ULongVector_front(self)

    def back(self):
        """back(self) -> std::vector< unsigned long long >::value_type const &"""
        return _TimeTagger.ULongVector_back(self)

    def assign(self, *args):
        """assign(self, n, x)"""
        return _TimeTagger.ULongVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.ULongVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned long long >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.ULongVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, n)"""
        return _TimeTagger.ULongVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _TimeTagger.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

STATE_STOPPED = _TimeTagger.STATE_STOPPED
STATE_IDLE = _TimeTagger.STATE_IDLE
STATE_RUNNING = _TimeTagger.STATE_RUNNING
STATE_ERROR = _TimeTagger.STATE_ERROR

def createTimeTagger(serial=""):
  """
    createTimeTagger(serial="") -> TimeTagger
    createTimeTagger() -> TimeTagger
    """
  return _TimeTagger.createTimeTagger(serial)

def freeTimeTagger(*args):
  """freeTimeTagger(tagger) -> bool"""
  return _TimeTagger.freeTimeTagger(*args)
class TimeTagger:
    """Proxy of C++ TimeTagger class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTagger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setTriggerLevel(self, *args):
        """setTriggerLevel(self, channel, voltage)"""
        return _TimeTagger.TimeTagger_setTriggerLevel(self, *args)

    def getTriggerLevel(self, *args):
        """getTriggerLevel(self, channel) -> double"""
        return _TimeTagger.TimeTagger_getTriggerLevel(self, *args)

    def setLineDelay(self, *args):
        """setLineDelay(self, channel, delay)"""
        return _TimeTagger.TimeTagger_setLineDelay(self, *args)

    def getLineDelay(self, *args):
        """getLineDelay(self, channel) -> long long"""
        return _TimeTagger.TimeTagger_getLineDelay(self, *args)

    def setFilter(self, *args):
        """setFilter(self, state)"""
        return _TimeTagger.TimeTagger_setFilter(self, *args)

    def getFilter(self):
        """getFilter(self) -> bool"""
        return _TimeTagger.TimeTagger_getFilter(self)

    def setNormalization(self, *args):
        """setNormalization(self, state)"""
        return _TimeTagger.TimeTagger_setNormalization(self, *args)

    def getNormalization(self):
        """getNormalization(self) -> bool"""
        return _TimeTagger.TimeTagger_getNormalization(self)

    def setDeadtime(self, *args):
        """setDeadtime(self, chan, deadtime) -> long long"""
        return _TimeTagger.TimeTagger_setDeadtime(self, *args)

    def registerChannel(self, *args):
        """registerChannel(self, chan)"""
        return _TimeTagger.TimeTagger_registerChannel(self, *args)

    def unregisterChannel(self, *args):
        """unregisterChannel(self, chan)"""
        return _TimeTagger.TimeTagger_unregisterChannel(self, *args)

    def enableCalibration(self, *args):
        """enableCalibration(self, chan)"""
        return _TimeTagger.TimeTagger_enableCalibration(self, *args)

    def disableCalibration(self, *args):
        """disableCalibration(self, chan)"""
        return _TimeTagger.TimeTagger_disableCalibration(self, *args)

    def autoCalibration(self, verbose=True):
        """
        autoCalibration(self, verbose=True)
        autoCalibration(self)
        """
        return _TimeTagger.TimeTagger_autoCalibration(self, verbose)

    def getBoardModel(self):
        """getBoardModel(self) -> int"""
        return _TimeTagger.TimeTagger_getBoardModel(self)

    def getStatus(self):
        """getStatus(self) -> enum running_state"""
        return _TimeTagger.TimeTagger_getStatus(self)

    def getSerial(self):
        """getSerial(self) -> std::string"""
        return _TimeTagger.TimeTagger_getSerial(self)

    def getDistributionCount(self, *args):
        """getDistributionCount(self, chan)"""
        return _TimeTagger.TimeTagger_getDistributionCount(self, *args)

    def getDistributionPSecs(self, *args):
        """getDistributionPSecs(self, chan)"""
        return _TimeTagger.TimeTagger_getDistributionPSecs(self, *args)

    def getChannels(self):
        """getChannels(self) -> unsigned int"""
        return _TimeTagger.TimeTagger_getChannels(self)

    def getPsPerClock(self):
        """getPsPerClock(self) -> long long"""
        return _TimeTagger.TimeTagger_getPsPerClock(self)

    def sync(self):
        """sync(self)"""
        return _TimeTagger.TimeTagger_sync(self)

TimeTagger_swigregister = _TimeTagger.TimeTagger_swigregister
TimeTagger_swigregister(TimeTagger)
cvar = _TimeTagger.cvar
CHANNEL_INVALID = cvar.CHANNEL_INVALID

class Tag:
    """Proxy of C++ Tag class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["overflow"] = _TimeTagger.Tag_overflow_set
    __swig_getmethods__["overflow"] = _TimeTagger.Tag_overflow_get
    __swig_setmethods__["chan"] = _TimeTagger.Tag_chan_set
    __swig_getmethods__["chan"] = _TimeTagger.Tag_chan_get
    __swig_setmethods__["time"] = _TimeTagger.Tag_time_set
    __swig_getmethods__["time"] = _TimeTagger.Tag_time_get
    def __init__(self): 
        """__init__(self) -> Tag"""
        this = _TimeTagger.new_Tag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Tag
    __del__ = lambda self : None;
Tag_swigregister = _TimeTagger.Tag_swigregister
Tag_swigregister(Tag)

class _Iterator:
    """Proxy of C++ _Iterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TimeTagger.delete__Iterator
    __del__ = lambda self : None;
    def start(self):
        """start(self)"""
        return _TimeTagger._Iterator_start(self)

    def stop(self):
        """stop(self)"""
        return _TimeTagger._Iterator_stop(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger._Iterator_clear(self)

    def status(self):
        """status(self) -> enum running_state"""
        return _TimeTagger._Iterator_status(self)

    def getOverflows(self):
        """getOverflows(self) -> long long"""
        return _TimeTagger._Iterator_getOverflows(self)

    def getDuration(self):
        """getDuration(self) -> long long"""
        return _TimeTagger._Iterator_getDuration(self)

_Iterator_swigregister = _TimeTagger._Iterator_swigregister
_Iterator_swigregister(_Iterator)

class Iterator(_Iterator):
    """Proxy of C++ Iterator class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, tagger, chan) -> Iterator"""
        this = _TimeTagger.new_Iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Iterator
    __del__ = lambda self : None;
    def next(self):
        """next(self) -> long long"""
        return _TimeTagger.Iterator_next(self)

    def size(self):
        """size(self) -> int"""
        return _TimeTagger.Iterator_size(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Iterator_clear(self)

Iterator_swigregister = _TimeTagger.Iterator_swigregister
Iterator_swigregister(Iterator)

class Dump(_Iterator):
    """Proxy of C++ Dump class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dump, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dump, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _filename, _max_tags=1000000) -> Dump
        __init__(self, tagger, _filename) -> Dump
        """
        this = _TimeTagger.new_Dump(*args)
        try: self.this.append(this)
        except: self.this = this
    def stop(self):
        """stop(self)"""
        return _TimeTagger.Dump_stop(self)

    __swig_destroy__ = _TimeTagger.delete_Dump
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _TimeTagger.Dump_clear(self)

Dump_swigregister = _TimeTagger.Dump_swigregister
Dump_swigregister(Dump)

class StartStop(_Iterator):
    """Proxy of C++ StartStop class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartStop, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartStop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _binwidth=1000) -> StartStop
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID) -> StartStop
        __init__(self, tagger, _click_channel) -> StartStop
        """
        this = _TimeTagger.new_StartStop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_StartStop
    __del__ = lambda self : None;
    def start(self):
        """start(self)"""
        return _TimeTagger.StartStop_start(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.StartStop_getData(self)

    def getCounts(self):
        """getCounts(self) -> long long"""
        return _TimeTagger.StartStop_getCounts(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.StartStop_clear(self)

StartStop_swigregister = _TimeTagger.StartStop_swigregister
StartStop_swigregister(StartStop)

class TimeDifferences(_Iterator):
    """Proxy of C++ TimeDifferences class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeDifferences, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeDifferences, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _next_channel=CHANNEL_INVALID, 
            _sync_channel=CHANNEL_INVALID, _binwidth=1000, _n_bins=1000, _n_histograms=1) -> TimeDifferences
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _next_channel=CHANNEL_INVALID, 
            _sync_channel=CHANNEL_INVALID, _binwidth=1000, _n_bins=1000) -> TimeDifferences
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _next_channel=CHANNEL_INVALID, 
            _sync_channel=CHANNEL_INVALID, _binwidth=1000) -> TimeDifferences
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _next_channel=CHANNEL_INVALID, 
            _sync_channel=CHANNEL_INVALID) -> TimeDifferences
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _next_channel=CHANNEL_INVALID) -> TimeDifferences
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID) -> TimeDifferences
        __init__(self, tagger, _click_channel) -> TimeDifferences
        """
        this = _TimeTagger.new_TimeDifferences(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_TimeDifferences
    __del__ = lambda self : None;
    def start(self):
        """start(self)"""
        return _TimeTagger.TimeDifferences_start(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.TimeDifferences_getData(self)

    def getIndex(self):
        """getIndex(self)"""
        return _TimeTagger.TimeDifferences_getIndex(self)

    def setMaxCounts(self, *args):
        """setMaxCounts(self, c)"""
        return _TimeTagger.TimeDifferences_setMaxCounts(self, *args)

    def getCounts(self):
        """getCounts(self) -> int"""
        return _TimeTagger.TimeDifferences_getCounts(self)

    def ready(self):
        """ready(self) -> bool"""
        return _TimeTagger.TimeDifferences_ready(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.TimeDifferences_clear(self)

TimeDifferences_swigregister = _TimeTagger.TimeDifferences_swigregister
TimeDifferences_swigregister(TimeDifferences)

class Histogram:
    """Proxy of C++ Histogram class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _binwidth=1000, _n_bins=1000) -> Histogram
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID, _binwidth=1000) -> Histogram
        __init__(self, tagger, _click_channel, _start_channel=CHANNEL_INVALID) -> Histogram
        __init__(self, tagger, _click_channel) -> Histogram
        """
        this = _TimeTagger.new_Histogram(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self):
        """start(self)"""
        return _TimeTagger.Histogram_start(self)

    def stop(self):
        """stop(self)"""
        return _TimeTagger.Histogram_stop(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Histogram_clear(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.Histogram_getData(self)

    def getIndex(self):
        """getIndex(self)"""
        return _TimeTagger.Histogram_getIndex(self)

    __swig_setmethods__["td"] = _TimeTagger.Histogram_td_set
    __swig_getmethods__["td"] = _TimeTagger.Histogram_td_get
    __swig_destroy__ = _TimeTagger.delete_Histogram
    __del__ = lambda self : None;
Histogram_swigregister = _TimeTagger.Histogram_swigregister
Histogram_swigregister(Histogram)

class Flim:
    """Proxy of C++ Flim class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _click_channel, _start_channel, _next_channel, _binwidth=1000, _n_bins=1000, 
            _n_histograms=1) -> Flim
        __init__(self, tagger, _click_channel, _start_channel, _next_channel, _binwidth=1000, _n_bins=1000) -> Flim
        __init__(self, tagger, _click_channel, _start_channel, _next_channel, _binwidth=1000) -> Flim
        __init__(self, tagger, _click_channel, _start_channel, _next_channel) -> Flim
        """
        this = _TimeTagger.new_Flim(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self):
        """start(self)"""
        return _TimeTagger.Flim_start(self)

    def stop(self):
        """stop(self)"""
        return _TimeTagger.Flim_stop(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Flim_clear(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.Flim_getData(self)

    def getIndex(self):
        """getIndex(self)"""
        return _TimeTagger.Flim_getIndex(self)

    __swig_destroy__ = _TimeTagger.delete_Flim
    __del__ = lambda self : None;
Flim_swigregister = _TimeTagger.Flim_swigregister
Flim_swigregister(Flim)

class Correlation:
    """Proxy of C++ Correlation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Correlation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Correlation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _channel_1, _channel_2, _binwidth=1000, _n_bins=1000) -> Correlation
        __init__(self, tagger, _channel_1, _channel_2, _binwidth=1000) -> Correlation
        __init__(self, tagger, _channel_1, _channel_2) -> Correlation
        """
        this = _TimeTagger.new_Correlation(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self):
        """start(self)"""
        return _TimeTagger.Correlation_start(self)

    def stop(self):
        """stop(self)"""
        return _TimeTagger.Correlation_stop(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Correlation_clear(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.Correlation_getData(self)

    def getIndex(self):
        """getIndex(self)"""
        return _TimeTagger.Correlation_getIndex(self)

    __swig_destroy__ = _TimeTagger.delete_Correlation
    __del__ = lambda self : None;
Correlation_swigregister = _TimeTagger.Correlation_swigregister
Correlation_swigregister(Correlation)

class CountBetweenMarkers(_Iterator):
    """Proxy of C++ CountBetweenMarkers class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountBetweenMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CountBetweenMarkers, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _click_channel, _begin_channel, _end_channel=CHANNEL_INVALID, _n_values=1000) -> CountBetweenMarkers
        __init__(self, tagger, _click_channel, _begin_channel, _end_channel=CHANNEL_INVALID) -> CountBetweenMarkers
        __init__(self, tagger, _click_channel, _begin_channel) -> CountBetweenMarkers
        """
        this = _TimeTagger.new_CountBetweenMarkers(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_CountBetweenMarkers
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _TimeTagger.CountBetweenMarkers_clear(self)

    def ready(self):
        """ready(self) -> bool"""
        return _TimeTagger.CountBetweenMarkers_ready(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.CountBetweenMarkers_getData(self)

    def getBinWidths(self):
        """getBinWidths(self)"""
        return _TimeTagger.CountBetweenMarkers_getBinWidths(self)

    def getDataBlocking(self):
        """getDataBlocking(self)"""
        return _TimeTagger.CountBetweenMarkers_getDataBlocking(self)

CountBetweenMarkers_swigregister = _TimeTagger.CountBetweenMarkers_swigregister
CountBetweenMarkers_swigregister(CountBetweenMarkers)

class Counter(_Iterator):
    """Proxy of C++ Counter class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Counter, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Counter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, tagger, _channels, _binwidth=1000000000000LL, _n_values=1) -> Counter
        __init__(self, tagger, _channels, _binwidth=1000000000000LL) -> Counter
        __init__(self, tagger, _channels) -> Counter
        """
        this = _TimeTagger.new_Counter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Counter
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _TimeTagger.Counter_clear(self)

    def getData(self):
        """getData(self)"""
        return _TimeTagger.Counter_getData(self)

    def getIndex(self):
        """getIndex(self)"""
        return _TimeTagger.Counter_getIndex(self)

    def Data(self):
        """Data(self) -> IntVector"""
        return _TimeTagger.Counter_Data(self)

Counter_swigregister = _TimeTagger.Counter_swigregister
Counter_swigregister(Counter)

class Countrate(_Iterator):
    """Proxy of C++ Countrate class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Countrate, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Countrate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, tagger, _channels) -> Countrate"""
        this = _TimeTagger.new_Countrate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Countrate
    __del__ = lambda self : None;
    def getData(self):
        """getData(self)"""
        return _TimeTagger.Countrate_getData(self)

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Countrate_clear(self)

Countrate_swigregister = _TimeTagger.Countrate_swigregister
Countrate_swigregister(Countrate)

class SingTag(_Iterator):
    """Proxy of C++ SingTag class"""
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingTag, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, t, _channels, _outmode=0) -> SingTag
        __init__(self, t, _channels) -> SingTag
        """
        this = _TimeTagger.new_SingTag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_SingTag
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _TimeTagger.SingTag_clear(self)

SingTag_swigregister = _TimeTagger.SingTag_swigregister
SingTag_swigregister(SingTag)

# This file is compatible with both classic and new-style classes.


